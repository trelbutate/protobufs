// @generated by protoc-gen-es v1.2.0
// @generated from file meshtastic/telemetry.proto (package meshtastic, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * 
 * Supported I2C Sensors for telemetry in Meshtastic
 *
 * @generated from enum meshtastic.TelemetrySensorType
 */
export const TelemetrySensorType = proto3.makeEnum(
  "meshtastic.TelemetrySensorType",
  [
    {no: 0, name: "SENSOR_UNSET"},
    {no: 1, name: "BME280"},
    {no: 2, name: "BME680"},
    {no: 3, name: "MCP9808"},
    {no: 4, name: "INA260"},
    {no: 5, name: "INA219"},
    {no: 6, name: "BMP280"},
    {no: 7, name: "SHTC3"},
    {no: 8, name: "LPS22"},
    {no: 9, name: "QMC6310"},
    {no: 10, name: "QMI8658"},
    {no: 11, name: "QMC5883L"},
    {no: 12, name: "SHT31"},
    {no: 13, name: "PMSA003I"},
  ],
);

/**
 * 
 * Key native device metrics such as battery level
 *
 * @generated from message meshtastic.DeviceMetrics
 */
export const DeviceMetrics = proto3.makeMessageType(
  "meshtastic.DeviceMetrics",
  () => [
    { no: 1, name: "battery_level", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "voltage", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "channel_utilization", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "air_util_tx", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ],
);

/**
 * 
 * Weather station or other environmental metrics
 *
 * @generated from message meshtastic.EnvironmentMetrics
 */
export const EnvironmentMetrics = proto3.makeMessageType(
  "meshtastic.EnvironmentMetrics",
  () => [
    { no: 1, name: "temperature", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "relative_humidity", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "barometric_pressure", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "gas_resistance", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "voltage", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 6, name: "current", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ],
);

/**
 * 
 * Air quality metrics
 *
 * @generated from message meshtastic.AirQualityMetrics
 */
export const AirQualityMetrics = proto3.makeMessageType(
  "meshtastic.AirQualityMetrics",
  () => [
    { no: 1, name: "pm10_standard", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "pm25_standard", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "pm100_standard", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "pm10_environmental", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "pm25_environmental", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "pm100_environmental", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "particles_03um", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 8, name: "particles_05um", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 9, name: "particles_10um", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 10, name: "particles_25um", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 11, name: "particles_50um", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "particles_100um", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

/**
 * 
 * Types of Measurements the telemetry module is equipped to handle
 *
 * @generated from message meshtastic.Telemetry
 */
export const Telemetry = proto3.makeMessageType(
  "meshtastic.Telemetry",
  () => [
    { no: 1, name: "time", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "device_metrics", kind: "message", T: DeviceMetrics, oneof: "variant" },
    { no: 3, name: "environment_metrics", kind: "message", T: EnvironmentMetrics, oneof: "variant" },
    { no: 4, name: "air_quality_metrics", kind: "message", T: AirQualityMetrics, oneof: "variant" },
  ],
);

