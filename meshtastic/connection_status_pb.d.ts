// @generated by protoc-gen-es v1.2.0
// @generated from file meshtastic/connection_status.proto (package meshtastic, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message meshtastic.DeviceConnectionStatus
 */
export declare class DeviceConnectionStatus extends Message<DeviceConnectionStatus> {
  /**
   *
   * WiFi Status
   *
   * @generated from field: optional meshtastic.WifiConnectionStatus wifi = 1;
   */
  wifi?: WifiConnectionStatus;

  /**
   *
   * WiFi Status
   *
   * @generated from field: optional meshtastic.EthernetConnectionStatus ethernet = 2;
   */
  ethernet?: EthernetConnectionStatus;

  /**
   *
   * Bluetooth Status
   *
   * @generated from field: optional meshtastic.BluetoothConnectionStatus bluetooth = 3;
   */
  bluetooth?: BluetoothConnectionStatus;

  /**
   *
   * Serial Status
   *
   * @generated from field: optional meshtastic.SerialConnectionStatus serial = 4;
   */
  serial?: SerialConnectionStatus;

  constructor(data?: PartialMessage<DeviceConnectionStatus>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "meshtastic.DeviceConnectionStatus";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceConnectionStatus;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceConnectionStatus;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceConnectionStatus;

  static equals(a: DeviceConnectionStatus | PlainMessage<DeviceConnectionStatus> | undefined, b: DeviceConnectionStatus | PlainMessage<DeviceConnectionStatus> | undefined): boolean;
}

/**
 *
 * WiFi connection status
 *
 * @generated from message meshtastic.WifiConnectionStatus
 */
export declare class WifiConnectionStatus extends Message<WifiConnectionStatus> {
  /**
   *
   * Connection status
   *
   * @generated from field: meshtastic.NetworkConnectionStatus status = 1;
   */
  status?: NetworkConnectionStatus;

  /**
   *
   * WiFi access point SSID 
   *
   * @generated from field: string ssid = 2;
   */
  ssid: string;

  /**
   *
   * RSSI of wireless connection
   *
   * @generated from field: int32 rssi = 3;
   */
  rssi: number;

  constructor(data?: PartialMessage<WifiConnectionStatus>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "meshtastic.WifiConnectionStatus";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WifiConnectionStatus;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WifiConnectionStatus;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WifiConnectionStatus;

  static equals(a: WifiConnectionStatus | PlainMessage<WifiConnectionStatus> | undefined, b: WifiConnectionStatus | PlainMessage<WifiConnectionStatus> | undefined): boolean;
}

/**
 *
 * Ethernet connection status
 *
 * @generated from message meshtastic.EthernetConnectionStatus
 */
export declare class EthernetConnectionStatus extends Message<EthernetConnectionStatus> {
  /**
   *
   * Connection status
   *
   * @generated from field: meshtastic.NetworkConnectionStatus status = 1;
   */
  status?: NetworkConnectionStatus;

  constructor(data?: PartialMessage<EthernetConnectionStatus>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "meshtastic.EthernetConnectionStatus";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EthernetConnectionStatus;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EthernetConnectionStatus;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EthernetConnectionStatus;

  static equals(a: EthernetConnectionStatus | PlainMessage<EthernetConnectionStatus> | undefined, b: EthernetConnectionStatus | PlainMessage<EthernetConnectionStatus> | undefined): boolean;
}

/**
 *
 * Ethernet or WiFi connection status
 *
 * @generated from message meshtastic.NetworkConnectionStatus
 */
export declare class NetworkConnectionStatus extends Message<NetworkConnectionStatus> {
  /**
   *
   * IP address of device
   *
   * @generated from field: fixed32 ip_address = 1;
   */
  ipAddress: number;

  /**
   *
   * Whether the device has an active connection or not
   *
   * @generated from field: bool is_connected = 2;
   */
  isConnected: boolean;

  /**
   *
   * Whether the device has an active connection to an MQTT broker or not
   *
   * @generated from field: bool is_mqtt_connected = 3;
   */
  isMqttConnected: boolean;

  /**
   *
   * Whether the device is actively remote syslogging or not
   *
   * @generated from field: bool is_syslog_connected = 4;
   */
  isSyslogConnected: boolean;

  constructor(data?: PartialMessage<NetworkConnectionStatus>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "meshtastic.NetworkConnectionStatus";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NetworkConnectionStatus;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NetworkConnectionStatus;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NetworkConnectionStatus;

  static equals(a: NetworkConnectionStatus | PlainMessage<NetworkConnectionStatus> | undefined, b: NetworkConnectionStatus | PlainMessage<NetworkConnectionStatus> | undefined): boolean;
}

/**
 *
 * Bluetooth connection status
 *
 * @generated from message meshtastic.BluetoothConnectionStatus
 */
export declare class BluetoothConnectionStatus extends Message<BluetoothConnectionStatus> {
  /**
   *
   * The pairing PIN for bluetooth
   *
   * @generated from field: uint32 pin = 1;
   */
  pin: number;

  /**
   *
   * RSSI of bluetooth connection
   *
   * @generated from field: int32 rssi = 2;
   */
  rssi: number;

  /**
   *
   * Whether the device has an active connection or not
   *
   * @generated from field: bool is_connected = 3;
   */
  isConnected: boolean;

  constructor(data?: PartialMessage<BluetoothConnectionStatus>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "meshtastic.BluetoothConnectionStatus";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothConnectionStatus;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothConnectionStatus;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothConnectionStatus;

  static equals(a: BluetoothConnectionStatus | PlainMessage<BluetoothConnectionStatus> | undefined, b: BluetoothConnectionStatus | PlainMessage<BluetoothConnectionStatus> | undefined): boolean;
}

/**
 *
 * Serial connection status
 *
 * @generated from message meshtastic.SerialConnectionStatus
 */
export declare class SerialConnectionStatus extends Message<SerialConnectionStatus> {
  /**
   *
   * Serial baud rate
   *
   * @generated from field: uint32 baud = 1;
   */
  baud: number;

  /**
   *
   * Whether the device has an active connection or not
   *
   * @generated from field: bool is_connected = 2;
   */
  isConnected: boolean;

  constructor(data?: PartialMessage<SerialConnectionStatus>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "meshtastic.SerialConnectionStatus";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerialConnectionStatus;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerialConnectionStatus;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerialConnectionStatus;

  static equals(a: SerialConnectionStatus | PlainMessage<SerialConnectionStatus> | undefined, b: SerialConnectionStatus | PlainMessage<SerialConnectionStatus> | undefined): boolean;
}

