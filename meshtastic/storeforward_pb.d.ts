// @generated by protoc-gen-es v1.2.0
// @generated from file meshtastic/storeforward.proto (package meshtastic, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 *
 * TODO: REPLACE
 *
 * @generated from message meshtastic.StoreAndForward
 */
export declare class StoreAndForward extends Message<StoreAndForward> {
  /**
   *
   * TODO: REPLACE
   *
   * @generated from field: meshtastic.StoreAndForward.RequestResponse rr = 1;
   */
  rr: StoreAndForward_RequestResponse;

  /**
   *
   * TODO: REPLACE
   *
   * @generated from oneof meshtastic.StoreAndForward.variant
   */
  variant: {
    /**
     *
     * TODO: REPLACE
     *
     * @generated from field: meshtastic.StoreAndForward.Statistics stats = 2;
     */
    value: StoreAndForward_Statistics;
    case: "stats";
  } | {
    /**
     *
     * TODO: REPLACE
     *
     * @generated from field: meshtastic.StoreAndForward.History history = 3;
     */
    value: StoreAndForward_History;
    case: "history";
  } | {
    /**
     *
     * TODO: REPLACE
     *
     * @generated from field: meshtastic.StoreAndForward.Heartbeat heartbeat = 4;
     */
    value: StoreAndForward_Heartbeat;
    case: "heartbeat";
  } | {
    /**
     *
     * Empty Payload
     *
     * @generated from field: bool empty = 5;
     */
    value: boolean;
    case: "empty";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<StoreAndForward>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "meshtastic.StoreAndForward";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoreAndForward;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoreAndForward;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoreAndForward;

  static equals(a: StoreAndForward | PlainMessage<StoreAndForward> | undefined, b: StoreAndForward | PlainMessage<StoreAndForward> | undefined): boolean;
}

/**
 *
 * 001 - 063 = From Router
 * 064 - 127 = From Client
 *
 * @generated from enum meshtastic.StoreAndForward.RequestResponse
 */
export declare enum StoreAndForward_RequestResponse {
  /**
   *
   * Unset/unused
   *
   * @generated from enum value: UNSET = 0;
   */
  UNSET = 0,

  /**
   *
   * Router is an in error state.
   *
   * @generated from enum value: ROUTER_ERROR = 1;
   */
  ROUTER_ERROR = 1,

  /**
   *
   * Router heartbeat
   *
   * @generated from enum value: ROUTER_HEARTBEAT = 2;
   */
  ROUTER_HEARTBEAT = 2,

  /**
   *
   * Router has requested the client respond. This can work as a
   * "are you there" message.
   *
   * @generated from enum value: ROUTER_PING = 3;
   */
  ROUTER_PING = 3,

  /**
   *
   * The response to a "Ping"
   *
   * @generated from enum value: ROUTER_PONG = 4;
   */
  ROUTER_PONG = 4,

  /**
   *
   * Router is currently busy. Please try again later.
   *
   * @generated from enum value: ROUTER_BUSY = 5;
   */
  ROUTER_BUSY = 5,

  /**
   *
   * Router is responding to a request for history.
   *
   * @generated from enum value: ROUTER_HISTORY = 6;
   */
  ROUTER_HISTORY = 6,

  /**
   *
   * Router is responding to a request for stats.
   *
   * @generated from enum value: ROUTER_STATS = 7;
   */
  ROUTER_STATS = 7,

  /**
   *
   * Client is an in error state.
   *
   * @generated from enum value: CLIENT_ERROR = 64;
   */
  CLIENT_ERROR = 64,

  /**
   *
   * Client has requested a replay from the router.
   *
   * @generated from enum value: CLIENT_HISTORY = 65;
   */
  CLIENT_HISTORY = 65,

  /**
   *
   * Client has requested stats from the router.
   *
   * @generated from enum value: CLIENT_STATS = 66;
   */
  CLIENT_STATS = 66,

  /**
   *
   * Client has requested the router respond. This can work as a
   * "are you there" message.
   *
   * @generated from enum value: CLIENT_PING = 67;
   */
  CLIENT_PING = 67,

  /**
   *
   * The response to a "Ping"
   *
   * @generated from enum value: CLIENT_PONG = 68;
   */
  CLIENT_PONG = 68,

  /**
   *
   * Client has requested that the router abort processing the client's request
   *
   * @generated from enum value: CLIENT_ABORT = 106;
   */
  CLIENT_ABORT = 106,
}

/**
 *
 * TODO: REPLACE
 *
 * @generated from message meshtastic.StoreAndForward.Statistics
 */
export declare class StoreAndForward_Statistics extends Message<StoreAndForward_Statistics> {
  /**
   *
   * Number of messages we have ever seen
   *
   * @generated from field: uint32 messages_total = 1;
   */
  messagesTotal: number;

  /**
   *
   * Number of messages we have currently saved our history.
   *
   * @generated from field: uint32 messages_saved = 2;
   */
  messagesSaved: number;

  /**
   *
   * Maximum number of messages we will save
   *
   * @generated from field: uint32 messages_max = 3;
   */
  messagesMax: number;

  /**
   *
   * Router uptime in seconds
   *
   * @generated from field: uint32 up_time = 4;
   */
  upTime: number;

  /**
   *
   * Number of times any client sent a request to the S&F.
   *
   * @generated from field: uint32 requests = 5;
   */
  requests: number;

  /**
   *
   * Number of times the history was requested.
   *
   * @generated from field: uint32 requests_history = 6;
   */
  requestsHistory: number;

  /**
   *
   * Is the heartbeat enabled on the server?
   *
   * @generated from field: bool heartbeat = 7;
   */
  heartbeat: boolean;

  /**
   *
   * Is the heartbeat enabled on the server?
   *
   * @generated from field: uint32 return_max = 8;
   */
  returnMax: number;

  /**
   *
   * Is the heartbeat enabled on the server?
   *
   * @generated from field: uint32 return_window = 9;
   */
  returnWindow: number;

  constructor(data?: PartialMessage<StoreAndForward_Statistics>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "meshtastic.StoreAndForward.Statistics";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoreAndForward_Statistics;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoreAndForward_Statistics;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoreAndForward_Statistics;

  static equals(a: StoreAndForward_Statistics | PlainMessage<StoreAndForward_Statistics> | undefined, b: StoreAndForward_Statistics | PlainMessage<StoreAndForward_Statistics> | undefined): boolean;
}

/**
 *
 * TODO: REPLACE
 *
 * @generated from message meshtastic.StoreAndForward.History
 */
export declare class StoreAndForward_History extends Message<StoreAndForward_History> {
  /**
   *
   * Number of that will be sent to the client
   *
   * @generated from field: uint32 history_messages = 1;
   */
  historyMessages: number;

  /**
   *
   * The window of messages that was used to filter the history client requested
   *
   * @generated from field: uint32 window = 2;
   */
  window: number;

  /**
   *
   * The window of messages that was used to filter the history client requested
   *
   * @generated from field: uint32 last_request = 3;
   */
  lastRequest: number;

  constructor(data?: PartialMessage<StoreAndForward_History>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "meshtastic.StoreAndForward.History";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoreAndForward_History;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoreAndForward_History;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoreAndForward_History;

  static equals(a: StoreAndForward_History | PlainMessage<StoreAndForward_History> | undefined, b: StoreAndForward_History | PlainMessage<StoreAndForward_History> | undefined): boolean;
}

/**
 *
 * TODO: REPLACE
 *
 * @generated from message meshtastic.StoreAndForward.Heartbeat
 */
export declare class StoreAndForward_Heartbeat extends Message<StoreAndForward_Heartbeat> {
  /**
   *
   * Number of that will be sent to the client
   *
   * @generated from field: uint32 period = 1;
   */
  period: number;

  /**
   *
   * If set, this is not the primary Store & Forward router on the mesh
   *
   * @generated from field: uint32 secondary = 2;
   */
  secondary: number;

  constructor(data?: PartialMessage<StoreAndForward_Heartbeat>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "meshtastic.StoreAndForward.Heartbeat";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoreAndForward_Heartbeat;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoreAndForward_Heartbeat;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoreAndForward_Heartbeat;

  static equals(a: StoreAndForward_Heartbeat | PlainMessage<StoreAndForward_Heartbeat> | undefined, b: StoreAndForward_Heartbeat | PlainMessage<StoreAndForward_Heartbeat> | undefined): boolean;
}

